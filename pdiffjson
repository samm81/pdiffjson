#!/bin/bash

set -euo pipefail

if [[ $# -lt 2 ]]; then
  echo "Usage: $(basename "$0") [--sort-arrays] [diff options] file1.json file2.json

Show pretty-printed, colored diff of normalized JSON. Uses less to
paginate the output. Allows a readable diff of any JSON, ignoring all
non-semantic differences of whitespace and key ordering.

Fields of each object are output with the keys in sorted order
prior to calling diff, so insignificant differences of key order
are ignored. The --sort-arrays option also enables recursive sorting
of all array values, so all differences in ordering within arrays
are ignored.

This is a \"semi-structural diff\", meaning it shows only structural
(semantic) changes but the diff is shown syntactically on JSON output,
which actually makes it more readable and flexible than a true
structural diff.

Works on large files since it relies only on diff and jq.

By default calls diff without arguments, yielding a unified diff. But
it can be helpful to add standard diff arguments to refine the type of
output, such as:
-c (contextual diff),
-C2 (contextual diff with two lines of context), or
-U5 (unified diff with 5 lines of context).
"
  exit 1
fi

jq_script=.
if [ "$1" == "--sort-arrays" ]; then
  # Enable recursive sort on all arrays.
  jq_script="walk(if type == \"array\" then sort else . end)"
  shift
fi

# Last two args are the two files. Other options are passed to diff.
file1="${*: -2:1}"
file2="${*: -1:1}"
num_diff_opts=$(($# - 2))

if [[ ! -f "$file1" ]]; then
  echo "not a file: $file1"
  exit 1
fi
if [[ ! -f "$file2" ]]; then
  echo "not a file: $file2"
  exit 1
fi

diff_command() {
  diff "${@:1:$num_diff_opts}" <(jq --sort-keys "$jq_script" <"$file1") <(jq --sort-keys "$jq_script" <"$file2")
}

if command -v colordiff &>/dev/null; then
  diff_command "$@" | colordiff | less -R
else
  echo "Warning: colordiff not found, using diff instead" >&2
  diff_command "$@" | less -R
fi
